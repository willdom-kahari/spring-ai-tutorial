package com.waduclay.springaitutorial.controller;


import com.waduclay.springaitutorial.dto.ApiResponse;
import com.waduclay.springaitutorial.service.ChatService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.validation.annotation.Validated;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

/**
 * REST controller demonstrating various prompt engineering techniques with AI chat.
 * This controller showcases different ways to structure and template prompts for AI interactions,
 * including simple prompts, parameterized templates, external template files, and system messages.
 * All endpoints return standardized ApiResponse wrappers for consistency.
 * 
 * @author <a href="mailto:developer.wadu@gmail.com">Willdom Kahari</a>
 */
@RestController
@Validated
public class SimplePromptController {
    private final ChatService chatService;

    /**
     * Constructs a new SimplePromptController with the provided ChatService.
     * 
     * @param chatService the ChatService used for AI chat operations
     */
    public SimplePromptController(ChatService chatService) {
        this.chatService = chatService;
    }

    /**
     * Demonstrates a simple, hardcoded prompt without parameters.
     * This endpoint shows the most basic form of AI interaction with a fixed user message.
     * 
     * @return ApiResponse containing a dad joke generated by the AI
     */
    @GetMapping("/simple-prompt")
    public ApiResponse<String> simplePrompt() {
        return chatService.generateSimplePrompt();
    }

    /**
     * Demonstrates parameterized prompt templates with variable substitution.
     * This endpoint shows how to create dynamic prompts by substituting variables
     * in a template string, allowing for customizable AI responses based on user input.
     * 
     * @param genre the YouTube content genre to search for (1-50 characters, cannot be blank)
     * @return ApiResponse containing a list of popular YouTubers in the specified genre
     */
    @GetMapping("/yt")
    public ApiResponse<String> simplePromptTemplate(@RequestParam(value = "genre", defaultValue = "tech") 
                                      @NotBlank(message = "Genre cannot be blank")
                                      @Size(min = 1, max = 50, message = "Genre must be between 1 and 50 characters")
                                      String genre) {
        return chatService.generatePromptTemplate(genre);
    }

    /**
     * Demonstrates external prompt template files with variable substitution.
     * This endpoint shows how to load prompt templates from external resource files,
     * promoting template reusability and separation of concerns between code and content.
     * 
     * @param genre the YouTube content genre to search for (1-50 characters, cannot be blank)
     * @return ApiResponse containing a list of popular YouTubers using external template
     */
    @GetMapping("/yt-ex")
    public ApiResponse<String> simpleExtPromptTemplate(@RequestParam(value = "genre", defaultValue = "tech") 
                                         @NotBlank(message = "Genre cannot be blank")
                                         @Size(min = 1, max = 50, message = "Genre must be between 1 and 50 characters")
                                         String genre) {
        return chatService.generateExternalPromptTemplate(genre);
    }

    /**
     * Demonstrates the use of system messages to define AI behavior and constraints.
     * This endpoint shows how to use system messages to establish the AI's role and behavior,
     * combined with user messages to create contextual interactions with specific personas.
     * 
     * @return ApiResponse containing a dad joke generated with system message constraints
     */
    @GetMapping("/jokes")
    public ApiResponse<String> dadJoke() {
        return chatService.generateWithSystemMessage();
    }
}
