package com.waduclay.springaitutorial.chat.controller;


import com.waduclay.springaitutorial.chat.service.ChatService;
import com.waduclay.springaitutorial.shared.dto.ApiResponse;
import com.waduclay.springaitutorial.shared.dto.ContextInjectionRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

/**
 * REST controller demonstrating various prompt engineering techniques with AI chat.
 * This controller showcases different ways to structure and template prompts for AI interactions,
 * including simple prompts, parameterized templates, external template files, and system messages.
 * All endpoints return standardized ApiResponse wrappers for consistency.
 *
 * @author <a href="mailto:developer.wadu@gmail.com">Willdom Kahari</a>
 */
@RestController
@RequestMapping("/api/v1/prompts")
@Validated
@Tag(name = "Prompt Engineering", description = "Demonstrations of various prompt engineering techniques and templates")
public class PromptEngineeringController {
    private final ChatService chatService;

    /**
     * Constructs a new PromptEngineeringController with the provided ChatService.
     *
     * @param chatService the ChatService used for AI chat operations
     */
    public PromptEngineeringController(ChatService chatService) {
        this.chatService = chatService;
    }

    /**
     * Demonstrates a simple, hardcoded prompt without parameters.
     * This endpoint shows the most basic form of AI interaction with a fixed user message.
     *
     * @return ApiResponse containing a dad joke generated by the AI
     */
    @Operation(
            summary = "Generate Simple Prompt Response",
            description = "Demonstrates the most basic form of AI interaction using a hardcoded prompt without any parameters. Returns a dad joke generated by the AI."
    )
    @ApiResponses({
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "200",
                    description = "Successfully generated simple prompt response"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "503",
                    description = "AI service unavailable"
            )
    })
    @GetMapping("/basic")
    public ApiResponse<String> simplePrompt() {
        return chatService.generateSimplePrompt();
    }

    /**
     * Demonstrates parameterized prompt templates with variable substitution.
     * This endpoint shows how to create dynamic prompts by substituting variables
     * in a template string, allowing for customizable AI responses based on user input.
     *
     * @param genre the YouTube content genre to search for (1-50 characters, cannot be blank)
     * @return ApiResponse containing a list of popular YouTubers in the specified genre
     */
    @Operation(
            summary = "Generate Templated Prompt Response",
            description = "Demonstrates parameterized prompt templates with variable substitution. Shows how to create dynamic prompts by substituting variables in a template string for customizable AI responses."
    )
    @ApiResponses({
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "200",
                    description = "Successfully generated templated prompt response"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "400",
                    description = "Invalid input parameters"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "503",
                    description = "AI service unavailable"
            )
    })
    @GetMapping("/template")
    public ApiResponse<String> simplePromptTemplate(@RequestParam(value = "genre", defaultValue = "tech")
                                                    @NotBlank(message = "Genre cannot be blank")
                                                    @Size(min = 1, max = 50, message = "Genre must be between 1 and 50 characters")
                                                    String genre) {
        return chatService.generatePromptTemplate(genre);
    }

    /**
     * Demonstrates external prompt template files with variable substitution.
     * This endpoint shows how to load prompt templates from external resource files,
     * promoting template reusability and separation of concerns between code and content.
     *
     * @param genre the YouTube content genre to search for (1-50 characters, cannot be blank)
     * @return ApiResponse containing a list of popular YouTubers using external template
     */
    @Operation(
            summary = "Generate External Template Response",
            description = "Demonstrates external prompt template files with variable substitution. Shows how to load prompt templates from external resource files for better template reusability and separation of concerns."
    )
    @ApiResponses({
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "200",
                    description = "Successfully generated external template response"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "400",
                    description = "Invalid input parameters"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "503",
                    description = "AI service unavailable"
            )
    })
    @GetMapping("/external-template")
    public ApiResponse<String> simpleExtPromptTemplate(@RequestParam(value = "genre", defaultValue = "tech")
                                                       @NotBlank(message = "Genre cannot be blank")
                                                       @Size(min = 1, max = 50, message = "Genre must be between 1 and 50 characters")
                                                       String genre) {
        return chatService.generateExternalPromptTemplate(genre);
    }

    /**
     * Demonstrates the use of system messages to define AI behavior and constraints.
     * This endpoint shows how to use system messages to establish the AI's role and behavior,
     * combined with user messages to create contextual interactions with specific personas.
     *
     * @return ApiResponse containing a dad joke generated with system message constraints
     */
    @Operation(
            summary = "Generate System Message Response",
            description = "Demonstrates the use of system messages to define AI behavior and constraints. Shows how system messages establish the AI's role and behavior for contextual interactions with specific personas."
    )
    @ApiResponses({
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "200",
                    description = "Successfully generated system message response"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "503",
                    description = "AI service unavailable"
            )
    })
    @GetMapping("/system-message")
    public ApiResponse<String> dadJoke() {
        return chatService.generateWithSystemMessage();
    }

    @Operation(
            summary = "Generate Context Injection Response",
            description = "Demonstrates context injection (prompt stuffing) technique where additional context is injected into the prompt to provide the AI with relevant information for more accurate responses."
    )
    @ApiResponses({
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "200",
                    description = "Successfully generated context injection response"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "400",
                    description = "Invalid input parameters"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                    responseCode = "503",
                    description = "AI service unavailable"
            )
    })
    @PostMapping("/context-injection")
    public ApiResponse<String> get2024OlympicSports(
            @Parameter(description = "Request containing prompt and context injection flag")
            @Valid @RequestBody ContextInjectionRequest request
    ) {
        return chatService.stuffThePrompt(request.getPrompt(), request.isStuffit());
    }
}
